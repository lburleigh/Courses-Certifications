knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'C:/Users/larn_/OneDrive - Louisiana State University/Career')
# Load necessary libraries
library(tidyverse)
# Load necessary libraries
library(tidyverse)
library(randomForest)
library(caret)
library(tibble)
df <- read.csv("C:/Users/larn_/OneDrive - Louisiana State University/Career/fitness_class_2212.csv")
# Make months numeric
df$months_as_member <- as.numeric(df$months_as_member)
# Replace weight NAs with column average
df <- df %>% mutate(across(weight, ~replace_na(., mean(., na.rm=TRUE, trim = 0.10))))
# Remove 'days' in some rows of days_before
df$days_before <- gsub("days", "", as.character(df$days_before))
# Make days_before numeric
df$days_before <- as.numeric(df$days_before)
# Make day_of_week labels consistent
df$day_of_week[which(df$day_of_week == "Monday")] <- "Mon"
df$day_of_week[which(df$day_of_week == "Wednesday")] <- "Wed"
df$day_of_week[which(df$day_of_week == "Fri.")] <- "Fri"
# Replace '-' categories with 'unknown'
df$category[which(df$category == "-")] <- "unknown"
# Make attended a factor
df$attended <- as.factor(df$attended)
showed <- df %>% filter(attended == 1)
yesno <- c("Did Not Attend", "Attended")
names(yesno) <- c("0", "1")
df$logmonths <- log(df$months_as_member)
dfoutrmv <- df[df$months_as_member != max(df$months_as_member), ]
# Split the data into training and testing sets
set.seed(123)
train_indices <- sample(1:nrow(df), 0.7 * nrow(df))  # 70% for training
train_data <- df[train_indices, ]
test_data <- df[-train_indices, ]
# Train the logistic regression model
logreg_model <- glm(attended ~ . - booking_id, data = train_data, family = binomial)
# Make predictions on the test set
logreg_pred <- predict(logreg_model, newdata = test_data, type = "response")
logreg_predclass <- ifelse(logreg_pred >= 0.5, 1, 0)
# Evaluate the model
accuracy <- mean(logreg_predclass == test_data$attended)
print(paste("Accuracy:", accuracy))
# Train the random forest model
rf_model <- randomForest(attended ~ . - booking_id, data = train_data)
# Train the random forest model
rf_model <- randomForest(attended ~ . - booking_id, data = train_data)
# Make predictions on the test set
rf_pred <- predict(rf_model, newdata = test_data, type = "response")
rf_predclass <- ifelse(rf_pred == 1, 0, 1)
# Evaluate the model
accuracy <- mean(rf_predclass == test_data$attended)
# Evaluate the model
accuracy <- mean(rf_predclass == test_data$attended)
print(paste("Accuracy:", accuracy))
# Check the distribution of the target variable
table(df$attended)
# Check the distribution of the target variable
table(df$attended)
# Calculate evaluation metrics for logistic regression
logreg_predclass <- as.factor(logreg_predclass)
logreg_precision <- confusionMatrix(logreg_predclass, test_data$attended)$byClass["Pos Pred Value"]
logreg_recall <- confusionMatrix(logreg_predclass, test_data$attended)$byClass["Sensitivity"]
logreg_f1 <- 2 * (logreg_precision * logreg_recall) / (logreg_precision + logreg_recall)
# Calculate evaluation metrics for random forest
rf_predclass <- as.factor(rf_predclass)
rf_precision <- confusionMatrix(rf_predclass, test_data$attended)$byClass["Pos Pred Value"]
rf_recall <- confusionMatrix(rf_predclass, test_data$attended)$byClass["Sensitivity"]
rf_f1 <- 2 * (rf_precision * rf_recall) / (rf_precision + rf_recall)
# Create a table with evaluation metrics
evaluation_table <- tibble(Method = c("Logistic Regression", "Random Forest"),
Precision = c(logreg_precision, rf_precision),
Recall = c(logreg_recall, rf_recall),
F1_Score = c(logreg_f1, rf_f1))
# Print the evaluation table
print(evaluation_table)
# Evaluate the model
rf_accuracy <- mean(rf_predclass == test_data$attended)
# Evaluate the model
logreg_accuracy <- mean(logreg_predclass == test_data$attended)
# Create a table with evaluation metrics
evaluation_table <- tibble(Method = c("Logistic Regression", "Random Forest"),
Accuracy = c(logreg_accuracy, rf_accuracy)
Precision = c(logreg_precision, rf_precision),
# Create a table with evaluation metrics
evaluation_table <- tibble(Method = c("Logistic Regression", "Random Forest"),
Accuracy = c(logreg_accuracy, rf_accuracy),
Precision = c(logreg_precision, rf_precision),
Recall = c(logreg_recall, rf_recall),
F1_Score = c(logreg_f1, rf_f1))
# Print the evaluation table
print(evaluation_table)
